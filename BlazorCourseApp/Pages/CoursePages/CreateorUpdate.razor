@page "/createorupdate"
@page "/course/edit/{Id:int}"

@using BlazorCourse.Models
@using BlazorCourse.Business.Contracts
@using BlazorCourseApp.Service


@inject ICourseRepository _courseRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload

@attribute [Authorize]

<h4>CreateorUpdate</h4>
<div class="col-md-12">
    <div class="card">
        <div class="card-body">
            <EditForm Model="courseModel" OnValidSubmit="CourseCreateOrUpdate">
               <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="courseModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Course Price</label>
                    <InputNumber @bind-Value="courseModel.CoursePrice" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>courseModel.CoursePrice"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputText @bind-Value="courseModel.Description" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.Description"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Title</label>
                    <InputText @bind-Value="courseModel.Title" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.Title"></ValidationMessage>
                </div> 
                <div class="form-group">
                    <label>Sub Title</label>
                    <InputText @bind-Value="courseModel.SubTitle" class="form-control"></InputText>
                    <ValidationMessage For="()=>courseModel.SubTitle"></ValidationMessage>
                </div>
                @if (Id > 0)
                {
                    <div class="form-group">
                        <InputFile OnChange="AddPicture"></InputFile>
                    </div>
                }
              
                <div class="form-group">
                    <button class="btn btn-success">Course Add</button>
                    <NavLink href="courselist" class=" btn btn-danger">Back to Course List</NavLink>
                </div>
            </EditForm>
        </div>
    </div>

</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> State { get; set; }

    [Parameter]
    public int? Id { get; set; }
    private string Title { get; set; }
    private CourseDto courseModel { get; set; } = new CourseDto();

    protected override async Task OnInitializedAsync()
    {
        var authState = await State;
        if(!authState.User.Identity.IsAuthenticated)
        {
            var url = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/Identity/account/login?returnUrl={url.LocalPath}");
        }

        if (Id != null)
        {
            Title = "Update";
            var data = await _courseRepository.GetCourse((int)Id);
            courseModel = data.Data;
        }
    }
    private async Task CourseCreateOrUpdate()
    {

        try
        {
            if(Id != null)
            {
                var updateData = await _courseRepository.UpdateCourse((int)Id, courseModel);
                if (updateData.IsSuccess)
                    await _jsRuntime.ToastrSuccess(updateData.Message);
                else
                    await _jsRuntime.ToasrtError(updateData.Message);
            }
            else
            {
                var created = await _courseRepository.CreateCourse(courseModel);
                if (created.IsSuccess)
                    await _jsRuntime.ToastrSuccess(created.Message);
                else
                    await _jsRuntime.ToasrtError(created.Message);

            }
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToasrtError(ex.Message.ToString());
        }
    }
    private async Task AddPicture(InputFileChangeEventArgs file)
    {
        var fileName = file.File;
        if (fileName != null)
        {
            var data = await _fileUpload.UploadFile(fileName);
            var updateCourse = await _courseRepository.UpdateCourseImage((int)Id, data);
            if (updateCourse.IsSuccess)
                await _jsRuntime.ToastrSuccess(updateCourse.Message);
            else
                await _jsRuntime.ToasrtError(updateCourse.Message);
        }
    }

}
